<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>How to do an unit test for an MRTK Unity project | GithubCITest Unity documentation </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="How to do an unit test for an MRTK Unity project | GithubCITest Unity documentation ">
    <meta name="generator" content="docfx 2.56.4.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    <meta property="docfx:rel" content="../">
    
  </head>  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list">Search Results for <span></span></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">
<h1 id="how-to-do-an-unit-test-for-an-mrtk-unity-project" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="1" sourceendlinenumber="1">How to do an unit test for an MRTK Unity project</h1>

<ul sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="3" sourceendlinenumber="10">
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="3" sourceendlinenumber="10"><a href="#how-to-do-an-unit-test-for-an-mrtk-unity-project" data-raw-source="[How to do an unit test for an MRTK Unity project](#how-to-do-an-unit-test-for-an-mrtk-unity-project)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="3" sourceendlinenumber="3">How to do an unit test for an MRTK Unity project</a><ul sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="4" sourceendlinenumber="10">
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="4" sourceendlinenumber="4"><a href="#context" data-raw-source="[Context](#context)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="4" sourceendlinenumber="4">Context</a></li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="5" sourceendlinenumber="5"><a href="#setup" data-raw-source="[Setup](#setup)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="5" sourceendlinenumber="5">Setup</a></li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="6" sourceendlinenumber="6"><a href="#making-a-test" data-raw-source="[Making a test](#making-a-test)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="6" sourceendlinenumber="6">Making a test</a></li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="7" sourceendlinenumber="10"><a href="#precisions-for-play-mode-tests" data-raw-source="[Precisions For Play Mode Tests](#precisions-for-play-mode-tests)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="7" sourceendlinenumber="7">Precisions For Play Mode Tests</a><ul sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="8" sourceendlinenumber="10">
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="8" sourceendlinenumber="8"><a href="#creating-a-hand" data-raw-source="[Creating a hand](#creating-a-hand)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="8" sourceendlinenumber="8">Creating a hand</a></li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="9" sourceendlinenumber="9"><a href="#pinching-objects" data-raw-source="[Pinching objects](#pinching-objects)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="9" sourceendlinenumber="9">Pinching objects</a></li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="10" sourceendlinenumber="10"><a href="#making-reference-to-your-monobehavioursscripts" data-raw-source="[Making reference to your monobehaviours/scripts](#making-reference-to-your-monobehavioursscripts)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="10" sourceendlinenumber="10">Making reference to your monobehaviours/scripts</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="context" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="12" sourceendlinenumber="12">Context</h2>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="14" sourceendlinenumber="16">Microsoft and the open source community have created a lot of unit test to check if MRTK is broken or not before deploying a new version.
To do that, they even have created a whole bunch of tools to simulate the hands and other bricks of MRTK.
If you want to uses thoses tools and have access to the +300 unit test of MRTK, you can read this document.</p>
<h2 id="setup" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="18" sourceendlinenumber="18">Setup</h2>
<ol sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="20" sourceendlinenumber="21">
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="20" sourceendlinenumber="20">Make sure that you have the <a href="https://github.com/microsoft/MixedRealityToolkit-Unity/releases" data-raw-source="[test utilities](https://github.com/microsoft/MixedRealityToolkit-Unity/releases)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="20" sourceendlinenumber="20">test utilities</a> package installed  </li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="21" sourceendlinenumber="21">It&#39;s better to also add the <strong>EditModeTests</strong> &amp; <strong>PlayModeTests</strong> folders to your project (placed in the same place as in the github project)  that you can find <a href="https://github.com/microsoft/MixedRealityToolkit-Unity/tree/mrtk_development/Assets/MRTK/Tests" data-raw-source="[here](https://github.com/microsoft/MixedRealityToolkit-Unity/tree/mrtk_development/Assets/MRTK/Tests)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="21" sourceendlinenumber="21">here</a> to have examples and the Assembly Definition with the references to the mrtk already setup  </li>
</ol>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="23" sourceendlinenumber="23">Now everything should be ready to make unit test in the project</p>
<h2 id="making-a-test" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="25" sourceendlinenumber="25">Making a test</h2>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="27" sourceendlinenumber="29">Open either the <strong>PlayModeTests</strong> or the <strong>EditModeTests</strong> in case of what you need add a C# Test Script <em>(Right click &gt; Create &gt; Testing &gt; C# Test Script)</em>.<br>According to <a href="https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/UnitTests.html" data-raw-source="[MRTK documentation](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/UnitTests.html)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="28" sourceendlinenumber="28">MRTK documentation</a> you need to change all the content of the C# Test Script to either <a href="https://pastebin.com/WrY1e4W2" data-raw-source="[this for Play Mode Test](https://pastebin.com/WrY1e4W2)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="28" sourceendlinenumber="28">this for Play Mode Test</a> or <a href="https://pastebin.com/CxqPk46g" data-raw-source="[this for Edit Mode Test](https://pastebin.com/CxqPk46g)" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="28" sourceendlinenumber="28">this for Edit Mode Test</a>. <em>(don&#39;t forget to rename the class according to the filename !)</em>.
You can change and rename the default function <em>TestMyFeature</em> to make your first unit test or add another function. In this case make sure to add <code>[UnityTest]</code> above the function to make an unit test.</p>
<h2 id="precisions-for-play-mode-tests" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="31" sourceendlinenumber="31">Precisions For Play Mode Tests</h2>
<h3 id="creating-a-hand" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="34" sourceendlinenumber="34">Creating a hand</h3>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="35" sourceendlinenumber="36">To create a fake hand there is 2 way of doing it show in the examples :<br>The second way seems easier to use since you don&#39;t have to declare an object for the hand. <em>The first way maybe the old way of simulating hands during tests</em></p>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="38" sourceendlinenumber="38"><em>First way :</em></p>
<pre sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="39" sourceendlinenumber="48"><code class="lang-c#">// Create a hand this way
var rightHand = new TestHand(Handedness.Right);

//Manipulate the hand using
yield return rightHand.Show(new Vector3(0, 0, 0.5f));
yield return rightHand.Move(new Vector3(0, 0, 0.5f));
yield return rightHand.MoveTo(new Vector3(0, 0, 0.5f));
...
</code></pre><p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="50" sourceendlinenumber="50"><em>Second way :</em></p>
<pre sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="51" sourceendlinenumber="59"><code class="lang-c#">//You don&#39;t need to explicitly create a hand but you need to get the input simulation service like this :
var inputSimulationService = PlayModeTestUtilities.GetInputSimulationService(); //That&#39;s black magic

//Then you can manipulate hands like this :
yield return PlayModeTestUtilities.ShowHand(Handedness.Right, inputSimulationService);
yield return PlayModeTestUtilities.MoveHand(startPos, startPos, ArticulatedHandPose.GestureId.Open, Handedness.Right, inputSimulationService, 30);
yield return PlayModeTestUtilities.MoveHand(startPos, endPos, ArticulatedHandPose.GestureId.Pinch, Handedness.Right, inputSimulationService, 30);
</code></pre><h3 id="pinching-objects" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="61" sourceendlinenumber="61">Pinching objects</h3>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="62" sourceendlinenumber="62">Make sure you are opening the hand before pinch like this :</p>
<pre sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="63" sourceendlinenumber="66"><code class="lang-c#">yield return PlayModeTestUtilities.MoveHand(startPos, startPos, ArticulatedHandPose.GestureId.Open, Handedness.Right, inputSimulationService, 30);
yield return PlayModeTestUtilities.MoveHand(startPos, endPos, ArticulatedHandPose.GestureId.Pinch, Handedness.Right, inputSimulationService, 30);
</code></pre><p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="67" sourceendlinenumber="69">Or your hand is gonna move in a pinch position without grabbing the object<br>The last parameter is the number of frame. 60 = 1sec (if you are at 60FPS)
<em>Note : moving a object is sensitive to the number of steps. The number of steps is kinda like the speed at which the hand is moving, and if you are smoothing the movement of the object pinched when you are moving the hand, the object may have a big offset from the hand if the hand is moving very fast.</em></p>
<h3 id="making-reference-to-your-monobehavioursscripts" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="72" sourceendlinenumber="72">Making reference to your monobehaviours/scripts</h3>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="74" sourceendlinenumber="74"><strong>/!\ Warning /!\ : this is modifying the whole project structure and this solution may not be suited for a large scale project ! The purpose of this example is only to demonstrate what are the problems that are going to occur and how to handle them in a basic setup.</strong></p>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="76" sourceendlinenumber="76">If you have a custom script that you want to use for your unit test, you might encounter an issue where you can&#39;t make reference to your script with things like <code>GetComponent&lt;YourCustomScript&gt;()</code> etc... this is because you need to define Assembly Definition for your scripts. To be able to use them in your unit test you will need to :</p>
<ol sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="78" sourceendlinenumber="83">
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="78" sourceendlinenumber="78">Create an Assembly Definition where your script is <em>(Right Click &gt; Create &gt; Assembly Definition)</em>. It is recommended to name it the same name as the folder (for convention)</li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="79" sourceendlinenumber="80">Doing so will make a lot of errors in the scripts in the folder where you made the Assembly Definition. Unity considère chaque script dans le dossier comme faisant parti de l&#39;Assembly Definition là où elle est créée. To fix this, click on the Assembly Definition and in the inspector add references to the MRTK&#39;s assembly definition that are needed.
You will probably have to add at least those references for example <img src="https://i.imgur.com/O3Dl3RB.png" alt="example" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="80" sourceendlinenumber="80">   </li>
<li sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="81" sourceendlinenumber="83">Now that your new Assembly Definition have all the references needed (you may need to add more when the project grows) you need to add a reference of this Assembly Definition to the MRTK&#39;s Test Unit Assembly Definition.
If you took the PlayModeTests folder from the MRTK github, then you will find it in /Assets/MRTK/Tests/PlayModeTests and you will need to add a reference like so :
<img src="https://i.imgur.com/4NK3xAX.png" alt="example" sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="83" sourceendlinenumber="83">  </li>
</ol>
<p sourcefile="manual/UnitTestForMRTK.md" sourcestartlinenumber="85" sourceendlinenumber="85">And now everything should be ready to use all the scripts in the same folder as the Assembly Definition you made in your unit tests.</p>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/CleryJa/GithubCITest/blob/main/Documentation/manual/UnitTestForMRTK.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            GithubCITest Unity documentation
            
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
