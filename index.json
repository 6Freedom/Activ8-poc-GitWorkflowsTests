{
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | GithubCITest Unity documentation",
    "keywords": "Namespace Global Classes Shoot"
  },
  "api/Global.Shoot.html": {
    "href": "api/Global.Shoot.html",
    "title": "Class Shoot | GithubCITest Unity documentation",
    "keywords": "Class Shoot Inheritance Object Shoot Namespace : Global Assembly : Script.dll Syntax public class Shoot : MonoBehaviour Properties | Improve this Doc View Source Sphere Declaration public GameObject Sphere { get; set; } Property Value Type Description GameObject"
  },
  "api/PirateToolChest.ELanguage.html": {
    "href": "api/PirateToolChest.ELanguage.html",
    "title": "Enum ELanguage | GithubCITest Unity documentation",
    "keywords": "Enum ELanguage Namespace : PirateToolChest Assembly : Script.dll Syntax public enum ELanguage Fields Name Description en fr nothing"
  },
  "api/PirateToolChest.html": {
    "href": "api/PirateToolChest.html",
    "title": "Namespace PirateToolChest | GithubCITest Unity documentation",
    "keywords": "Namespace PirateToolChest Classes LanguageManager Structs SCSVLine SLocalizedText Enums ELanguage"
  },
  "api/PirateToolChest.LanguageManager.html": {
    "href": "api/PirateToolChest.LanguageManager.html",
    "title": "Class LanguageManager | GithubCITest Unity documentation",
    "keywords": "Class LanguageManager Inheritance Object LanguageManager Namespace : PirateToolChest Assembly : Script.dll Syntax public class LanguageManager : MonoBehaviour Fields | Improve this Doc View Source currentLanguage Declaration public ELanguage currentLanguage Field Value Type Description ELanguage | Improve this Doc View Source Instance Declaration public static LanguageManager Instance Field Value Type Description LanguageManager Methods | Improve this Doc View Source ChangeLanguage(ELanguage) Set current language to a specific language you want Declaration public void ChangeLanguage(ELanguage newLanguage) Parameters Type Name Description ELanguage newLanguage | Improve this Doc View Source ChangeLanguage(String) Set current language to a specific language you want Declaration public void ChangeLanguage(string newLanguage) Parameters Type Name Description String newLanguage | Improve this Doc View Source GetTextById(String) Search in the database the text you want in the current language. example : you want to get the translation of a specific sentence in the current language Declaration public string GetTextById(string _id) Parameters Type Name Description String _id The ID of the text you want Returns Type Description String The text associated with the id in the current language | Improve this Doc View Source GetTMPByContent(String) Search in the database the SLocalizedText you want in the current language. Example : you need a SLocalizedText from a TextMeshPro content to retrieve its ID Declaration public SLocalizedText GetTMPByContent(string _content) Parameters Type Name Description String _content The text currently in the scene Returns Type Description SLocalizedText The SLocalizedText associated with the text currently in the scene, in the current language | Improve this Doc View Source GetTranslation(String, ELanguage) Search in the CSV the translation of a certain text. Do not really translate of course. Example : you have a text in english and you want the translation of this text in french. Declaration public string GetTranslation(string _text, ELanguage _lang) Parameters Type Name Description String _text The source text ELanguage _lang The language you want the new text in Returns Type Description String | Improve this Doc View Source SwitchLanguage() Switch from EN to FR and from FR to EN Declaration public void SwitchLanguage() Events | Improve this Doc View Source OnLanguageChanged Declaration public static event Action<ELanguage> OnLanguageChanged Event Type Type Description Action < ELanguage >"
  },
  "api/PirateToolChest.SCSVLine.html": {
    "href": "api/PirateToolChest.SCSVLine.html",
    "title": "Struct SCSVLine | GithubCITest Unity documentation",
    "keywords": "Struct SCSVLine Namespace : PirateToolChest Assembly : Script.dll Syntax [Serializable] public struct SCSVLine Constructors | Improve this Doc View Source SCSVLine(String, Dictionary<ELanguage, String>) Declaration public SCSVLine(string _id, Dictionary<ELanguage, string> _text) Parameters Type Name Description String _id Dictionary < ELanguage , String > _text Fields | Improve this Doc View Source ID Declaration public string ID Field Value Type Description String | Improve this Doc View Source translations Declaration public Dictionary<ELanguage, string> translations Field Value Type Description Dictionary < ELanguage , String >"
  },
  "api/PirateToolChest.SLocalizedText.html": {
    "href": "api/PirateToolChest.SLocalizedText.html",
    "title": "Struct SLocalizedText | GithubCITest Unity documentation",
    "keywords": "Struct SLocalizedText Namespace : PirateToolChest Assembly : Script.dll Syntax [Serializable] public struct SLocalizedText Constructors | Improve this Doc View Source SLocalizedText(TMP_Text, String, TMP_FontAsset) Declaration public SLocalizedText(TMP_Text _tmp, string _id, TMP_FontAsset _originalFont) Parameters Type Name Description TMP_Text _tmp String _id TMP_FontAsset _originalFont Fields | Improve this Doc View Source ID Declaration public string ID Field Value Type Description String | Improve this Doc View Source originalFont Declaration public TMP_FontAsset originalFont Field Value Type Description TMP_FontAsset | Improve this Doc View Source TMP Declaration public TMP_Text TMP Field Value Type Description TMP_Text"
  },
  "index.html": {
    "href": "index.html",
    "title": "GithubCITest | GithubCITest Unity documentation",
    "keywords": "GithubCITest documentation : https://6freedom.github.io/Activ8-poc-GitWorkflowsTests"
  },
  "manual/Addressables.html": {
    "href": "manual/Addressables.html",
    "title": "Table of content | GithubCITest Unity documentation",
    "keywords": "Table of content Contexte Nota Bene Réalisation d'un proof of concept addressables Création de la scène Test de la scène Instanciation et nouveaux scripts Paramétrage des Addressables Conclusions Liens utiles Contexte Le but des addressables est de pouvoir lié des assets d'un projet unity à une adresse. Exemple : Vous faite un projet Unity Au démarrage votre scène ne contient qu'une camera et une light Vous faite un prefab qui contient un cube cube.prefab Ensuite vous écrivez un script CubeGenerator.cs Vous posez le script sur un gameobject Ce script contient une variable de type GameObject myPrefab qui est visible dans l'inspector Le script instancie le cube au Start() au centre du monde Vous revenez dans l'éditeur, drag&droppez le prefab dans l'inspector pour donner la référence au script Vous buildez Pour ce projet, votre build va contenir (pour simplifier) 3 assets : la scène, le script et le prefab. Avec les addressables voici ce qui se passe : Vous faite un projet Unity Au démarrage votre scène ne contient qu'une camera et une light Vous faite un prefab qui contient un cube cube.prefab Ensuite vous écrivez un script CubeGenerator.cs Vous posez le script sur un gameobject Ce script contient une variable de type AddressableAsset myPrefabAddressable qui est visible dans l'inspector Ce script load l'asset via myPrefabAddressable Une fois l'objet loadé, le script converti l'asset en prefab puis instancie le prefab au centre du monde Vous revenez dans l'éditeur, vous aller voir l'inspector du script et vous aller pouvoir choisir l'addressable du prefab Ensuite vous spécifiez dans les paramètre du projet où seront stocké les addressables (par exemple https://6freedom.studio/addressables/projetTest ) Ensuite vous faite une build des addressable dans la fenêtre associé Ensuite vous faite une build de votre projet Unity Pour ce projet, votre build va contenir (pour simplifier) que 2 assets : la scène et le script. Le prefab sera téléchargé au moment où le script va le load. Nota Bene Si l'utilisateur n'est pas connecté à internet, il faut prévoir un message d'erreur Si l'utilisateur a téléchargé un addressable une première fois, il est stocké dans le disque dur et n'a plus besoin d'internet Il est possible de load tous les assets au démarrage de l'application et rajouter une barre de chargement. C'est potentiellement plus pratique pour les utilisateurs Les addressables ont une date. Ce qui permet de vérifier si il existe une mise à jour de ces assets A chaque fois que l'équipe de développement veux mettre à jour les assets, il faut refaire une build des addressables puis les déposer sur le stockage Il est possible de choisir entre packager tous les assets dans un seul gros fichier, ou d'avoir plusieurs petits fichiers Réalisation d'un proof of concept addressables Utilisation d'un serveur Azure Blob storage fichier d'exemple stocker sur ce serveur Objectif : Réussir à mettre à jour des scripts, des scènes, des prefabs, des textures, des matérials, des sons Réussir à créer de nouveau comportement qui n'était pas prévu par le logiciel de base Tester la différence entre \"un chargement complet au démarrage\" et \"charger les fichiers un par un\" D'abord il faut installer le package Addressables. Voici le lien vers la documentation : https://docs.unity3d.com/Packages/com.unity.addressables@1.8/manual/index.html Création de la scène Premièrement j'ai créer une scene vide nommé Loader qui contient un seul script Loader.cs . Le but est que ce script charge la scene MainMenu qui elle est un Addressable. Première remarque : une scène Addressable ne peux pas être dans le build settings. Donc on ne peux pas loader la scène par son buildIndex . Secondement, pour charger un asset il faut faire Addressables.LoadAssetAsync<GameObject>(monPrefab).Completed += OnLoadDone; mais pour les scènes il faut faire Addressables.LoadSceneAsync(mainMenuScene).Completed += Loader_Completed; Donc mon Loader ressemble à ça : public class Loader : MonoBehaviour { public AssetReference mainMenuScene; // Start is called before the first frame update void Start() { Addressables.LoadSceneAsync(mainMenuScene).Completed += OnLoadDone; } private void OnLoadDone(AsyncOperationHandle<SceneInstance> obj) { if (obj.Status == AsyncOperationStatus.Succeeded) { Debug.Log($\"Scene{obj.Result.Scene.name} successfully loaded\"); } else { Debug.LogError(\"You don't have access to the internet or something\"); } } } Dans la scène MainMenu j'ai rajouté un bouton dans un canvas et un objet 3D. Ni le bouton, ni l'objet 3D ne sont taggé comme Addressables. Ils sont déjà dans une scène Addressable, donc pas besoin de cocher Addressables pour ces assets. Test de la scène Pour tester cette scène, j'ai fait une New Build des Addressables. J'ai mis seulement la scène Loader dans les build settings puis j'ai fait une build Windows Standalone. Je me retrouve donc, dans un dossier ServerData/ avec les addressables buildé et dans un dossier /Build la build WindowsStandalone. Ensuite je copie ce qui se trouve dans le dossier ServerData sur le serveur de stockage. Ensuite je lance l'application et je vois bien l'objet 3D et le bouton. Ensuite j'ai rouvert Unity, j'ai changé le bouton de couleur et j'ai mis un autre asset 3D. Ensuite j'ai fait une mise à jour des Addressables ( Update Previous Build ). Puis j'ai recopier sur le serveur de stockage Puis j'ai relancer l'application (sans nouvelle build Unity) et j'ai le nouveau bouton et le nouvel objet 3D. Instanciation et nouveaux scripts J'ai rajouté un script qui permet, lors de l'appui sur le bouton Spawn some snow d'instancier un prefab avec un particle system . Ce bouton fonctionne très bien dans l'éditeur mais ne fonctionne pas du tout dans la build. Pourquoi ? En ouvrant les logs de l'application, voici ce que l'on peux voir : Car selon la documentation officiel : Addressables can only distribute content, not code. As such, a code change generally necessitates a fresh player build, and often a fresh build of content La raison c'est que les scripts doivent être compilés. Or il n'y a pas de compilateur dans l'application en elle même et les scripts ne sont pas compilés au moment de buildé les Addressables. Paramétrage des Addressables Dans les paramètres de profiles des addressables j'ai rajouté un profil nommé 6freedom (1) puis j'ai rajouté deux variables (4) et (5). Ensuite j'ai choisi que les addressables seraient buildé dans un dossier sur mon disque dur (2). Et que le logiciel ira les loader depuis le serveur azure. Dans le Default Local Group j'ai mis Build Path en RemoteBuildPath et le Load Path en RemoteLoadPath pour que, par défaut, ça charge les assets depuis le serveur. Le paramètre Bundle Mode permet de choisir si on construit un seul gros fichier .bundle ou un fichier par asset ou un fichier par label prédéfinis à l'avance. Dans AddressableAssetSettings j'ai aussi mis les Build Path et les Load Path en Remote . En plus j'ai coché Build Remote Path Dans la fenêtre Groups je n'ai ajouté que la scene MainMenu Lors de la build des addressables il faut faire attention car il y a deux façons. (1) Faire une nouvelle version : créer un catalogue avec une date précise. A faire avant de faire un nouveau build du logiciel avec Unity (2) Mettre à jour une version : modifie le dernier catalogue en date. A faire quand on veux mettre à jour les fichiers sur le serveur de stockage. Conclusions Il est possible de à mettre à jour des assets mais pas des scripts. Si on veux mettre à jour des scripts il faut refaire une build et livrer cette build aux utilisateurs. Il est donc impossible de créer de nouveau comportement qui n'était pas prévu par le logiciel de base par une simple mise à jour des Addressables sur le serveur. Il n'y a pas besoin de mettre en Addressables les assets qui sont référencé par les gameobjects d'une scène si celle ci est en Addressable. Liens utiles Blog post about Addressables Official Documentation Tutorial how to build from remote path Load scene with addressables tutorial More tutorials"
  },
  "manual/AlgoRecherche.html": {
    "href": "manual/AlgoRecherche.html",
    "title": "PoC Algorithme de Recherche | GithubCITest Unity documentation",
    "keywords": "PoC Algorithme de Recherche Cas d'utilisation en C# Console Contexte Trouver l'algorithme de recherche pour la recherche de gammes Algorithmes de sous-chaîne de : https://www.wikizero.com/fr/Algorithme_de_recherche_de_sous-cha%C3%AEne Les algorithmes de recherche unique n'ont pas l'air de supporter les typos et les fautes, les rendants beaucoup moins intéressants pour notre cas d'utilisation Algorithmes de mesure de similarité ou Fuzzy Matching Le fait de chercher par similarité a pour nom Fuzzy Matching . Parmi les algorithmes de mesure de similarité, il semblerait que l'algorithme de Distance de Levenshtein semble être le plus populaire, permettant de mesurer la différence entre 2 mots et ainsi autoriser un seuil de différence pour supporter les typos. L'algorithme de distance de Levenshtein ne donne pas directement la liste des résultats qui correspondrait à la recherche mais va donc donner un score de correspondance qui permettra donc d'accepter les erreurs. Fuzzy Sharp Une librairie pour faire des recherches en Fuzzy Matching existe déjà, et semble être la meilleur solution pour faire des recherches qui accepte les typos. Elle est disponbile également sur NuGet permettant de l'installer facilement dans le projet. Les fonctions Process.ExtractSorted et Process.ExtractTop semblent être les fonctions qui correspondent le plus à notre besoin, la première permet d'avoir la liste de tous les mots qui correspondent du plus au moins correspondant, et la deuxième fait la même chose mais pour seulement les X (donné en argument) premiers resultats."
  },
  "manual/ContinousIntegration.html": {
    "href": "manual/ContinousIntegration.html",
    "title": "How to do Continuous Integration with github actions and Unity | GithubCITest Unity documentation",
    "keywords": "How to do Continuous Integration with github actions and Unity Continuous integration is made through Github Actions (you can access them with the tab Actions of your github repo page) that lets you run actions automatically on certain events such as build on a push of a certain branch, run unit test... Making github actions To make github actions you need to go to the Actions page of your project, and you can click on New workflow for your first action. by default actions are created in .github/workflows . Actions are .yml files made of multiple parts that are well detailed here . Setting up the project Follow meticulously this to get a license in function of the type of license you have (I tried to use a license I made through the unity hub but it didn't worked so it is important to get it this way) Use Case : Building your project on every push The best way to explain how to do things is through examples, so here is a very simple use case on a script to make a build on every push You need to checkout the project at the beginning of your actions or either your workflows won't be able to access the project #Name of the actions name: Generate Build #On every push on: [push] #Important for the license, the setup is different if you have a professional license env: UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} jobs: build: runs-on: ubuntu-latest steps: - name: Unity - Checkout uses: actions/checkout@v2 - uses: actions/cache@v2 with: path: Library key: Library-Activ8-poc-GitWorkflowsTests-Windows restore-keys: | Library-Activ8-poc-GitWorkflowsTests-Windows Library- - name: Unity - Builder uses: webbertakken/unity-builder@v1.4 with: unityVersion: 2019.3.15f1 targetPlatform: StandaloneWindows - name: Zip build folder run: zip -r Build build/StandaloneWindows - uses: \"marvinpinto/action-automatic-releases@latest\" with: repo_token: \"${{ secrets.GITHUB_TOKEN }}\" prerelease: false automatic_release_tag: \"Latest\" files: Build.zip Available targetPlatforms : Code name Description StandaloneOSX Build a macOS standalone (Intel 64-bit). StandaloneWindows Build a Windows standalone. StandaloneWindows64 Build a Windows 64-bit standalone. StandaloneLinux64 Build a Linux 64-bit standalone. iOS Build an iOS player. Android Build an Android .apk standalone app. WebGL WebGL. WSAPlayer Build an Windows Store Apps player. PS4 Build a PS4 Standalone. XboxOne Build a Xbox One Standalone. tvOS Build to Apple's tvOS platform. Switch Build a Nintendo Switch player. Error expected if you don't have a checkout step : Aborting batchmode due to failure: Couldn't set project path to: /github/workspace/github/workspace/. Resources webbertaken's github repo that index most of the actions possible with unity Unity CI documentation why checkout is important Building a hololens package automatically It's not possible to build visual studio solution for hololens with Unity CI at the moment simply because of this Conclusion : Either no CI Either we make a docker image ourself and we configure it Either we will use a virtual machine with windows dedicacted with jenkins Build a .net Core application Example Github Action with comment : (source) name: Build App on: [push] jobs: build: runs-on: windows-latest steps: - uses: actions/checkout@v1 name: Checkout Code - name: Setup MSBuild Path uses: warrenbuckley/Setup-MSBuild@v1 - name: Setup NuGet uses: NuGet/setup-nuget@v1.0.2 - name: Restore NuGet Packages # Bien penser à mettre le chemin vers la solution, ici c'est à la racine donc directement le nom du fichier run: nuget restore AlgoRechechePoC.sln - name: Build App # Bien penser à mettre le chemin vers la solution, ici c'est à la racine donc directement le nom du fichier run: msbuild AlgoRechechePoC.sln /p:Configuration=Debug - name: Upload Artifact uses: actions/upload-artifact@v1.0.0 with: name: published_app # Là où l'application est build, ici avec Rider l'application est build dans ce chemin path: bin\\Debug\\netcoreapp3.1"
  },
  "manual/docfxformultipleproject.html": {
    "href": "manual/docfxformultipleproject.html",
    "title": "| GithubCITest Unity documentation",
    "keywords": ""
  },
  "manual/documentationtype.html": {
    "href": "manual/documentationtype.html",
    "title": "Doxygen VS DocFX | GithubCITest Unity documentation",
    "keywords": "Doxygen VS DocFX Context Which documentation can be used to make the documentation of Activ8 Comparison Doxygen DocFX Installation - + Documentation (on it) = = Resources - + Functionment - + Doxygen Installation Easy to install, explained here . Documentation Documentation is ok, but doesn't have a lot of recent resources, or resources at all. Resources Not much resources, and nothing really recent. Functionment Generates HTML files directly DocFX Installation Easy installation with this . Documentation Well documented and a lot of resources documentation Resources A lot of resources are made, templates, github workflows and examples Functionment Operates a web server and generates the HTML Files Conclusion DocFX seems easier to use and setup. A lot more resources are available for DocFX than for Doxygen. For DocFX doc templates are available and easy to install and not every resources you look for were made before 2016. Markdown are handled in a better way for DocFX. More about DocFX Setup a workflow to make the documentation update automatically The goal is to make a branch that will be dedicated to being the documentation. It will contains nothing more than the website file to make the documentation. Firstly, you need to setup a workflow by following this . Be sure to edit it so that it triggers with the pushes on the correct branch. This workflow will create a branch gh-pages and rebuild the website everytime it is needed. Then, make sure that in the Settings repo, the Source of the github pages of your project is the correct branch (it should be gh-pages ). Lastly, you need to edit the .gitignore so that you can have the .sln and the .csproj files of your project (DocFX builds its automatic documentation based on that). Everything should be ready now. Troubleshooting If there is no .csproj file in your project folder you can generate them with Unity in your Preferences > External Tools check Generate all .csproj files . You are going to want to uncheck it after that or you won't be able to delete the uncesseray .csproj files. Then in your project's root you can delete the default's unity csproj or else DocFX with add them to the documentation : Solution to have docFX for multiple projects Problème : Chaque repo a sa doc (= son site), comment faire pour avoir 1 seul doc pour tous les repos ? Solution proposée : Avoir des liens absolus dans la navbar qui amène vers les autres docs + un site qui servira de home page chaque documentation des repos utiliseront le même thème (ou au moins la même base) pour qu'il y ait une cohérence dans la documentation"
  },
  "manual/identificationSystem.html": {
    "href": "manual/identificationSystem.html",
    "title": "Identification system | GithubCITest Unity documentation",
    "keywords": "Identification system When the user identify itself on the server the following steps are done: The client send it's ids (username and password) throught the TLS connection. The server look in the database for an user that match with the username/userid. The server hash the password (with the user salt) The server compare the hash with the stored password hash assigned with that username. if the hashes matches the server send to the client a session id or a JWT token. The salt is a random unique string for every user appened (or prepended) to the user password. Thanks to salt two users can share the same password without sharing the same hash. Salt must be stored in the database. Pepper is similar to salt but unlike this one, pepper is not stored in the database. That way if the database is compromised the hacker would not have access to the pepper and would not be able to crack the hashes. The main issues with peppers is their long term maintenance. Changing the pepper in use will invalidate all of the existing passwords stored in the database, which means that it can't easily be changed in the event of the pepper being compromised. links: Password Storage Cheat Sheet Adding Salt to Hashing: A Better Way to Store Passwords How does the attacker know what algorithm and salt to use in a dictionary attack? Json Web Token (JWT) JSON Web Token is used to carry information related to the identity and characteristics (claims) of a client. This information is signed by the server in order for it to detect whether it was tampered with after sending it to the client. This will prevent an attacker from changing the identity or any characteristics (for example, changing the role from simple user to admin or change the client login). JSON Web Token Cheat Sheet for Java The JWT is sent to the server for every request and the server validate the token before processing the request. In order to be validated a JWT must fullify some requirements (claims), specified during its creattion (ex: name of the issuer, name of the subject, expiration time, etc). A JWT have the following structure: Header, contain the algorithm used to generate the signature and the token type (JWT). Payload, contain a set of claims (both standards claims and customs ones) Signature, Securely validates the token. The signature is calculated by encoding the header and payload using Base64url Encoding and concatenating the two together with a period separator. links: Wikipedia Commencer avec jwt jwt.io What really is the difference between session and token based authentication JSON Web Tokens JSON Web Token Claims JSON Web Token Cheat Sheet for Java A Look at The Draft for JWT Best Current Practices Use JWT The Right Way! JwtSecurityToken Class documentation Preuve d’authentification avec JWT JWT: The Complete Guide to JSON Web Tokens"
  },
  "manual/localization.html": {
    "href": "manual/localization.html",
    "title": "Localization | GithubCITest Unity documentation",
    "keywords": "Localization Contexte Find a plugin to use to manage the localization of Activ8 Comparison Homemade localization (atm) No such localization I2 Localization Lean Localization Localization Pro Price 0€ (but cost time) 15$/seat 45$/seat Free 15$/seat CSV support Yes Yes Yes Yes Yes JSON Support No Yes No No No Google sheet support No No Yes No No RTL Language No Yes Yes No No TMP Support Yes Yes Yes Yes Yes Sub-object translation No Yes Yes Yes Yes WYSIWYG No Yes No No Yes Plurals No No Yes No No Well documented No No Yes Yes TDB Open Source / Extensible Yes Yes Yes Yes Yes Note Batch tools to test Conclusion I2 Localization seems the best choice in my opinion because of the google sheet support making it very easy to work on translation while having all the other features available (Sub-object translation, RTL Language, good documentation...). The only feature that it is lacking is the WYSIWYG that could be very useful. Localization Pro seems interesting also, but doesn't have the same longevity as I2 Localization, so it probably had less time to be polished. It also doesn't have that much review on the store. Graveyard of the non-usable packages https://github.com/ilnprj/Localizator - https://assetstore.unity.com/packages/tools/gui/simple-localization-by-hippo-120113 - No TMP Support https://unitylist.com/p/kwf/Localization-Service - Last update 1+ year ago https://assetstore.unity.com/packages/tools/localization/localization-manager-158921 - Last update 6+ months ago https://github.com/90-games/UnityExtensionsLocalization - Look at this note https://github.com/ilnprj/Localizator - Changes only text https://github.com/RodionLodza/SimpleLocalization - Changes only text https://assetstore.unity.com/packages/tools/localization/bg-localization-114740 - Changes only text https://assetstore.unity.com/packages/tools/gui/ultimate-localization-179551#description - Not documented enough https://assetstore.unity.com/packages/tools/localization/bundle-language-manager-170711 - No CSV/Google sheet support"
  },
  "manual/PDFLib.html": {
    "href": "manual/PDFLib.html",
    "title": "PDF Parser lib comparaison | GithubCITest Unity documentation",
    "keywords": "PDF Parser lib comparaison Note : On dirait que la plupart des libs sont payantes/demande de payer si on veut les utiliser pour une raison commerciale Contexte Trouver une lib pour pouvoir extraire les process et les transformer ou au moins en deviner une gamme. iText7 ( lien ) Note : iText7 est la nouvelle version de iTextSharp que Grégoire avait trouvé. N'a pas l'air de proposer des services avancés, mais permettrai de lire des documents pdf en C#. Semble complexe à utiliser avec une documentation peu expliqué (seulement de la doc généré automatiquement). Semble proposer de convertir d'html vers pdf mais pas l'inverse. PdfTron ( lien ) Semble proposer un service de lecture avancé de document PDF : \"PDFTron.ai is a document understanding framework that combines the latest in deep learning and AI with 20 years of PDF and document expertise. PDFTron’s 3rd generation of content extraction technology is currently in development.\" Après un test sur leur site avec le document de Poclain, cet outil n'a pas l'air d'être assez fonctionnel pour nos besoins. à tester avec d'autres documents. La conversion en HTML semble très propre après un test sur leur site Docotic.pdf de BitMiracle ( lien 1 ) ( lien 2 ) A une fonction pour extraire automatiquement tout le texte et le mettre en String. Pareil pour les images. -> semble simple à utiliser. à l'air d'être très complet avec une bonne documentation : https://github.com/BitMiracle/Docotic.Pdf.Samples Impossible de convertir en XML / HTML mais propose de l'OCR pour lire du texte sur des images. Aspose.pdf ( lien ) Permettrait de convertir le document pdf en xml ou html. Propose beaucoup de service pour modifier un pdf, mais pas pour le lire. XpdfReader ( lien ) N'est pas une lib mais un logiciel capable d'ouvrir des pdfs et de les convertir. pdfminer.six ( lien 1 ) ( lien 2 ) Est en python. Mais possède un outil pour extraire la structure du document . PDF Reference ( lien ) Semble outdated : \" (Updated Oct. 23, 2007) \" PDF Focus ( lien ) Semble permettre de convertir le document en xml ou en html et ainsi manipuler le pdf avec sa structure. La conversion xml semble plus facile à manipuler que la conversion html. La conversion HTML laisse beaucoup plus à désirer que celle de PDFTron. Réflexions Est-ce que convertir le pdf en html ou xml permettrait de plus facilement le manipuler/lire ? Avoir une version html/xml permettrait d'avoir le document mise en page tout en gardant la structure de donnée derrière. Le XML semble plus adapté après avoir testé les 2 façons de faire avec la lib de Sautinsoft. Faire que l'utilisateur capture des zones de son écran pour les lire ensuite avec de l'OCR"
  },
  "manual/UnitTestForMRTK.html": {
    "href": "manual/UnitTestForMRTK.html",
    "title": "How to do an unit test for an MRTK Unity project | GithubCITest Unity documentation",
    "keywords": "How to do an unit test for an MRTK Unity project How to do an unit test for an MRTK Unity project Context Setup Making a test Precisions For Play Mode Tests Creating a hand Pinching objects Making reference to your monobehaviours/scripts Context Microsoft and the open source community have created a lot of unit test to check if MRTK is broken or not before deploying a new version. To do that, they even have created a whole bunch of tools to simulate the hands and other bricks of MRTK. If you want to uses thoses tools and have access to the +300 unit test of MRTK, you can read this document. Setup Make sure that you have the test utilities package installed It's better to also add the EditModeTests & PlayModeTests folders to your project (placed in the same place as in the github project) that you can find here to have examples and the Assembly Definition with the references to the mrtk already setup Now everything should be ready to make unit test in the project Making a test Open either the PlayModeTests or the EditModeTests in case of what you need add a C# Test Script (Right click > Create > Testing > C# Test Script) . According to MRTK documentation you need to change all the content of the C# Test Script to either this for Play Mode Test or this for Edit Mode Test . (don't forget to rename the class according to the filename !) . You can change and rename the default function TestMyFeature to make your first unit test or add another function. In this case make sure to add [UnityTest] above the function to make an unit test. Precisions For Play Mode Tests Creating a hand To create a fake hand there is 2 way of doing it show in the examples : The second way seems easier to use since you don't have to declare an object for the hand. The first way maybe the old way of simulating hands during tests First way : // Create a hand this way var rightHand = new TestHand(Handedness.Right); //Manipulate the hand using yield return rightHand.Show(new Vector3(0, 0, 0.5f)); yield return rightHand.Move(new Vector3(0, 0, 0.5f)); yield return rightHand.MoveTo(new Vector3(0, 0, 0.5f)); ... Second way : //You don't need to explicitly create a hand but you need to get the input simulation service like this : var inputSimulationService = PlayModeTestUtilities.GetInputSimulationService(); //That's black magic //Then you can manipulate hands like this : yield return PlayModeTestUtilities.ShowHand(Handedness.Right, inputSimulationService); yield return PlayModeTestUtilities.MoveHand(startPos, startPos, ArticulatedHandPose.GestureId.Open, Handedness.Right, inputSimulationService, 30); yield return PlayModeTestUtilities.MoveHand(startPos, endPos, ArticulatedHandPose.GestureId.Pinch, Handedness.Right, inputSimulationService, 30); Pinching objects Make sure you are opening the hand before pinch like this : yield return PlayModeTestUtilities.MoveHand(startPos, startPos, ArticulatedHandPose.GestureId.Open, Handedness.Right, inputSimulationService, 30); yield return PlayModeTestUtilities.MoveHand(startPos, endPos, ArticulatedHandPose.GestureId.Pinch, Handedness.Right, inputSimulationService, 30); Or your hand is gonna move in a pinch position without grabbing the object The last parameter is the number of frame. 60 = 1sec (if you are at 60FPS) Note : moving a object is sensitive to the number of steps. The number of steps is kinda like the speed at which the hand is moving, and if you are smoothing the movement of the object pinched when you are moving the hand, the object may have a big offset from the hand if the hand is moving very fast. Making reference to your monobehaviours/scripts /!\\ Warning /!\\ : this is modifying the whole project structure and this solution may not be suited for a large scale project ! The purpose of this example is only to demonstrate what are the problems that are going to occur and how to handle them in a basic setup. If you have a custom script that you want to use for your unit test, you might encounter an issue where you can't make reference to your script with things like GetComponent<YourCustomScript>() etc... this is because you need to define Assembly Definition for your scripts. To be able to use them in your unit test you will need to : Create an Assembly Definition where your script is (Right Click > Create > Assembly Definition) . It is recommended to name it the same name as the folder (for convention) Doing so will make a lot of errors in the scripts in the folder where you made the Assembly Definition. Unity considère chaque script dans le dossier comme faisant parti de l'Assembly Definition là où elle est créée. To fix this, click on the Assembly Definition and in the inspector add references to the MRTK's assembly definition that are needed. You will probably have to add at least those references for example Now that your new Assembly Definition have all the references needed (you may need to add more when the project grows) you need to add a reference of this Assembly Definition to the MRTK's Test Unit Assembly Definition. If you took the PlayModeTests folder from the MRTK github, then you will find it in /Assets/MRTK/Tests/PlayModeTests and you will need to add a reference like so : And now everything should be ready to use all the scripts in the same folder as the Assembly Definition you made in your unit tests."
  }
}